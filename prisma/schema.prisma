generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAT DateTime  @default(now()) @db.Timestamptz(6)
  roleId    String?   @db.Uuid
  mobile    String?   @unique @default("null")
  role      role?     @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student   student[]
}

model role {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  scopes    String[]
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  user      user[]
}

model school {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  city      String
  state     String
  country   String
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @db.Timestamptz(6)
  student   student[]
}

model student {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  userId    String   @db.Uuid
  schoolId  String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  school    school   @relation(fields: [schoolId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      user     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
